---
import { Icon } from '@astrojs/starlight/components'
import type { StarlightIcon } from '@astrojs/starlight/types'
import starlightConfig from 'virtual:starlight/user-config'
import starlightVersionsConfig from 'virtual:starlight-versions-config'
import StarlightVersionsConfig from 'virtual:starlight-versions-config'

import { getVersionFromSlug } from '../libs/versions'

const { id } = Astro.locals.starlightRoute

interface Props {
  iconName: StarlightIcon
}

const { iconName } = Astro.props

const versions = StarlightVersionsConfig.versions

const firstParts = new Set<string>()

for (const version of versions) {
  const firstPart = version.slug.split('/')[0]
  if (firstPart) firstParts.add(firstPart)
}

const availableLibraries = [...firstParts]

const pageLibrary = getVersionFromSlug(starlightVersionsConfig, starlightConfig, id)
---

<starlight-library-select>
  <label>
    <span class="sr-only">Select library</span>
    <Icon name={iconName} class="icon label-icon" />
    <select id="library-select" autocomplete="off">
      <option value={'both'}>Both</option>
      {
        availableLibraries.map((library) => (
          <option selected={library === pageLibrary?.slug} value={library}>
            {library}
          </option>
        ))
      }
    </select>
    <Icon name="down-caret" class="icon caret-icon" />
  </label>
</starlight-library-select>

<style>
  label {
    --sl-versions-label-icon-size: 0.875rem;
    --sl-versions-caret-icon-size: 1.25rem;

    align-items: center;
    color: var(--sl-color-gray-1);
    display: flex;
    gap: 0.25rem;
    position: relative;
  }

  label:hover {
    color: var(--sl-color-gray-2);
  }

  .icon {
    pointer-events: none;
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
  }

  .label-icon {
    font-size: var(--sl-versions-label-icon-size);
    inset-inline-start: 0;
  }

  .caret-icon {
    font-size: var(--sl-versions-caret-icon-size);
    inset-inline-end: 0;
  }

  select {
    appearance: none;
    background-color: transparent;
    border: 0;
    color: inherit;
    cursor: pointer;
    padding-block: 0.625rem;
    padding-inline: calc(var(--sl-versions-label-icon-size) + 0.375rem)
      calc(var(--sl-versions-caret-icon-size) + 0.25rem);
    text-overflow: ellipsis;
    width: 6.5em;
  }

  option {
    background-color: var(--sl-color-bg-nav);
    color: var(--sl-color-gray-1);
  }

  @media (min-width: 50rem) {
    select {
      font-size: var(--sl-text-sm);
    }
  }
</style>

<script>
  function updateSessionStorage() {
    const selectBox = document.getElementById('library-select') as HTMLSelectElement
    const selectedValue = selectBox.value
    // sessionStorage.setItem('selectedLibrary', selectedValue)
  }

  document.addEventListener('DOMContentLoaded', () => {
    const storedLabel = sessionStorage.getItem('selectedLibrary')
    const selectBox = document.getElementById('library-select') as HTMLSelectElement
    if (storedLabel) {
      selectBox.value = storedLabel
    }
    selectBox.addEventListener('change', updateSessionStorage)
  })
</script>

<!-- window.addEventListener('pageshow', (_event) => {
          const storedVersion = sessionStorage.getItem('selectedVersion')
          const optionToSelect = select.querySelector(`option[value="${storedVersion}"]`) as HTMLOptionElement
          select.selectedIndex = optionToSelect ? optionToSelect.index : 0
        }) -->
