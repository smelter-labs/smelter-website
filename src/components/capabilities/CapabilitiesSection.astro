---
import { Image } from "astro:assets";
import CapabilitiesItem from "./CapabilitiesItem.astro";

import alarm from "../../assets/capabilities/alarm.svg";
import bolt from "../../assets/capabilities/bolt.svg";
import capabilitiesBlur from "../../assets/capabilities/capabilities-blur2.svg";
import wavePattern from "../../assets/capabilities/capabilities-wave.svg";
import edit from "../../assets/capabilities/edit.svg";
import screen from "../../assets/capabilities/screen.svg";
import upload from "../../assets/capabilities/upload.svg";

const CAPABILITIES = [
	{
		label: "Your own composition",
		text: "Streamline your media production with LiveCompositor, effortlessly combining streams, text, images, and more into dynamic output streams.",
		icon: bolt,
	},
	{
		label: "Highly customizable",
		text: "Create custom effects with WGSL shaders and directly leverage GPU parallel processing capabilities.",
		icon: edit,
	},
	{
		label: "Real-time processing",
		text: "Process live streams in real-time with low latency.",
		icon: alarm,
	},
	{
		label: "Flexible",
		text: "Leverage LiveCompositor for flexible, real-time low-latency streaming and efficient offline processing.",
		icon: upload,
	},
	{
		label: "WebGPU and Rust",
		text: "Leverage Rust and WebGPU rendering for great performance.",
		icon: screen,
	},
] as const;
---

<section class="mx-40 flex flex-col items-center px-16 relative">
  <Image src={wavePattern} alt="wave pattern" class="absolute right-0 -z-10" />
  <Image id="capabilitiesBlur" src={capabilitiesBlur} alt="gradient" class="absolute -left-56 -translate-x-1/2 top-4 -z-10" />
  <h2 class="mb-2 text-capabilities-header">Capabilities</h2>
  <p class="text-capabilities-subheader">Simple, powerful, fast</p>
  <div class="mt-20 flex gap-6">

    <div class="flex flex-1 flex-col gap-y-6">
      {
        CAPABILITIES.filter((_, index) => !(index % 2)).map(capability => (
          <CapabilitiesItem {...capability} />
        ))
      }
    </div>
    <div class="flex flex-1 flex-col gap-y-6 self-center">
      {
        CAPABILITIES.filter((_, index) => index % 2).map(capability => (
          <CapabilitiesItem {...capability} />
        ))
      }
    </div>
  </div>
</section>


<script type="module">
  document.addEventListener('DOMContentLoaded', function () {
    const parallaxImage = document.getElementById('capabilitiesBlur');
    const parentSection = parallaxImage.closest('section');

    const handleScroll = () => {
        const sectionTop = parentSection.getBoundingClientRect().top;
        const scrollY = window.screenY;
        const sectionTopToPageTop = scrollY + sectionTop;
        const relativeTop = scrollY - sectionTopToPageTop + window.innerHeight;
        
        if (relativeTop > -window.innerHeight && sectionTop < window.innerHeight) {
            const translateY = (relativeTop * 0.3);
            parallaxImage.style.transform = `translateY(-${translateY}px) translateX(-50%)`;
        }
    };

  	window.addEventListener('scroll', handleScroll);
  });
</script>
