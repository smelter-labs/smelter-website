---
import { Image } from "astro:assets";
import UseCaseTile from "./UseCaseTile.astro";

import useCase1Image from "../../assets/use-cases/temp-use-case1.png";
import useCase2Image from "../../assets/use-cases/temp-use-case2.png";
import useCase3Image from "../../assets/use-cases/temp-use-case3.png";
import useCasesWave from "../../assets/use-cases/use-cases-wave.svg";

const USE_CASES = [
	{
		header: "Video conferencing",
		subHeader: "Stream or record video conferences",
		image: useCase1Image,
	},
	{
		header: "Broadcasting",
		subHeader: "Compose broadcasts",
		image: useCase2Image,
	},
	{
		header: "Live-streaming",
		subHeader: "Create awesome live-streams",
		image: useCase3Image,
	},
] as const;
---

<section class="py-14">
    <div>
        <div class="">
            <div class="flex justify-center gap-x-24 mt-4 mx-40 mb-44">
                <div class="flex flex-1 flex-col gap-y-6">
					<div class="flex flex-2">
						<div class="sticky top-28 self-start">
							<h2 class="mb-6 text-useCases-header">Use cases</h2>
							<p class="text-useCases-subheader">
								Use LiveCompositor for video conferencing, live-streaming,
								broadcasting, and more.
							</p>
						</div>
					</div>
					<div class="flex flex-1 bg-red-900"/>                         
                </div> 
                <div id="useCasesList" class="flex flex-1 flex-col gap-y-6">
                    {USE_CASES.map((useCase, index) => <UseCaseTile {...useCase} isActive={index === 0}  index={index}/>)}
                </div>
            </div>
        </div>
    </div>
</section>

<!-- <script type="module">
    document.addEventListener("DOMContentLoaded", () => {
        const useCasesList = document.querySelector('#useCasesList');
        const tiles = useCasesList.querySelectorAll(':scope > div');

        let tileBorderDivs = [];

        tiles.forEach(tile => {
            const children = Array.from(tile.querySelectorAll(':scope > *'));
            tileBorderDivs = tileBorderDivs.concat(children); 
        });        
	
		function interpolateColor(color1, color2, factor) {
		    var result = {};
		    result.r = Math.round(color1.r + factor * (color2.r - color1.r));
		    result.g = Math.round(color1.g + factor * (color2.g - color1.g));
		    result.b = Math.round(color1.b + factor * (color2.b - color1.b));
		    return result;
		}

        function onScroll() {
            tileBorderDivs.forEach(el => {
				const rect = el.getBoundingClientRect();

				const windowHeight = window.innerHeight;
        		const elementVisible = Math.min(rect.bottom, windowHeight) - Math.max(rect.top, 0);

            	var totalHeight = rect.height + windowHeight;
            	var visibleRatio = elementVisible / totalHeight;
            	var scrollPercent = (rect.top + elementVisible / 2) / windowHeight; // Calculate scroll percent based on visibility center
            	scrollPercent = Math.max(0, Math.min(1, scrollPercent)); // Clamp value between 0 and 1
				
				var startColor1 = { r: 251, g: 198, b: 207 };
    			var endColor1 = { r: 22, g: 17, b: 39 };
    			var startColor2 = { r: 255, g: 255, b: 255 };
    			var endColor2 = {  r: 255, g: 255, b: 255 };

    			var startColor = interpolateColor(startColor1, startColor2, scrollPercent);
    			var endColor = interpolateColor(endColor1, endColor2, scrollPercent);

    			el.style.background = `linear-gradient(to bottom, rgb(${startColor.r},${startColor.g},${startColor.b}), rgb(${endColor.r},${endColor.g},${endColor.b}))`;
            });
        }

        window.addEventListener('scroll', onScroll);
    });
</script>
		
		// function onScroll() {
        //     tiles.forEach(el => {
        //         const rect = el.getBoundingClientRect();
        //         const isActive = rect.top - 112 <= 0 && rect.bottom - 112 >= 0;
        //         if (isActive) {
		// 			el.classList.add('border-gradient-light-1')
        //         } else {
		// 			el.classList.add(['border','border-solid', 'border-useCases-borderInactive'])
        //         }
        //     });
        // } -->

