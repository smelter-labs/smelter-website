---
import SecondaryButton from "../../base/buttons/SecondaryButton.astro";
---

<section class="relative h-fit w-full text-center">
  <div class="flex flex-row">
    <div class="flex flex-col w-full px-12">
      <div class="flex gap-8">
        <div class="relative flex flex-1 aspect-video">
          <video
            id="videoBottom"
            class="absolute top-0 left-0 aspect-video rounded-xl object-cover"
            playsinline
            autoplay
            muted
            loop
            >
            <source src="/example-video.mp4" type="video/mp4" />
            Your browser does not support the video tag.
          </video>
          <video
            id="videoTop"
            class="absolute top-0 left-0 aspect-video rounded-xl object-cover"
            playsinline
            autoplay
            muted
            loop
          >
            <source src="/example-video.mp4" type="video/mp4" />
            Your browser does not support the video tag.
          </video>
        </div>
        <div class="flex flex-1 flex-col gap-4 text-start">
          <h2 class="text-ai-header">Flexible live stream utilities</h2>
          <p class="text-useCases-tileSubheader">
            Build powerful live stream experiences. Our programmable toolkit
            gives developers ultimate control over real-time video composition
            and dynamic content integration directly into their applications.
          </p>
          <div class="scroller" data-direction="right" data-speed="slow">
            <div class="scroller__inner">
              <div class="px-4 py-2 h-full bg-red-900 aspect-video w-[350px]">
                <h3>Ads embedding</h3>
              </div>
              <div class="px-4 py-2 h-full bg-green-900 aspect-video w-[350px]">
                <h3>AI effects</h3>
              </div>
              <div class="px-4 py-2 h-full bg-blue-900 aspect-video w-[350px]">
                <h3>AR avatars</h3>
              </div>
              <div class="px-4 py-2 h-full bg-purple-900 aspect-video w-[350px]">
                <h3>Collab streaming</h3>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="flex mt-4">
        <div class="flex-1">
          <div
            class="border border-solid border-ai-border w-fit flex flex-1.5 rounded-xl p-px h-14"
          >
            <div
              class="relative z-0 flex h-full flex-col justify-center px-6 sm:px-7"
            >
            </div>
          </div>
        </div>
        <div class="flex-1"></div>
      </div>
    </div>
  </div>
</section>

<style is:global>
  .scroller {
    max-width: 600px;
  }

  .scroller__inner {
    padding-block: 1rem;
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .scroller[data-animated="true"] {
    overflow: hidden;
    -webkit-mask: linear-gradient(
      90deg,
      transparent,
      white 20%,
      white 80%,
      transparent
    );
    mask: linear-gradient(
      90deg,
      transparent,
      white 20%,
      white 80%,
      transparent
    );
  }

  .scroller[data-animated="true"] .scroller__inner {
    width: max-content;
    flex-wrap: nowrap;
    animation: scroll var(--_animation-duration, 40s)
      var(--_animation-direction, forwards) linear infinite;
  }

  .scroller[data-direction="right"] {
    --_animation-direction: reverse;
  }

  .scroller[data-direction="left"] {
    --_animation-direction: forwards;
  }

  .scroller[data-speed="fast"] {
    --_animation-duration: 20s;
  }

  .scroller[data-speed="slow"] {
    --_animation-duration: 60s;
  }

  @keyframes scroll {
    to {
      transform: translate(calc(-50% - 0.5rem));
    }
  }

  /* general styles */

  :root {
    --clr-neutral-100: hsl(0, 0%, 100%);
    --clr-primary-100: hsl(205, 15%, 58%);
    --clr-primary-400: hsl(215, 25%, 27%);
    --clr-primary-800: hsl(217, 33%, 17%);
    --clr-primary-900: hsl(218, 33%, 9%);
  }

  html {
    color-scheme: dark;
  }

  body {
    display: grid;
    min-block-size: 100vh;
    place-content: center;
    font-family: system-ui;
    font-size: 1.125rem;
    background-color: var(--clr-primary-800);
  }

  .tag-list {
    margin: 0;
    padding-inline: 0;
    list-style: none;
  }

  .tag-list li {
    padding: 1rem;
    background: var(--clr-primary-400);
    border-radius: 0.5rem;
    box-shadow: 0 0.5rem 1rem -0.25rem var(--clr-primary-900);
  }

  /* for testing purposed to ensure the animation lined up correctly */
  .test {
    background: red !important;
  }
</style>

<script is:inline>
  document.addEventListener("astro:page-load", () => {
    // If a user hasn't opted in for recuded motion, then we add the animation
if (!window.matchMedia("(prefers-reduced-motion: reduce)").matches) {
  addAnimation();
}
function addAnimation() {
  const scrollers = document.querySelectorAll(".scroller");
  scrollers.forEach((scroller) => {
    // add data-animated="true" to every `.scroller` on the page
    scroller.setAttribute("data-animated", true);

    // Make an array from the elements within `.scroller-inner`
    const scrollerInner = scroller.querySelector(".scroller__inner");
    const scrollerContent = Array.from(scrollerInner.children);

    // For each item in the array, clone it
    // add aria-hidden to it
    // add it into the `.scroller-inner`
    scrollerContent.forEach((item) => {
      const duplicatedItem = item.cloneNode(true);
      duplicatedItem.setAttribute("aria-hidden", true);
      scrollerInner.appendChild(duplicatedItem);
    });
  });
}
    // const container = document.getElementById("squares-container");
    // if (!container) return;

    // const squares = Array.from(container.children);
    // const squareWidth = squares[0].offsetWidth;
    // const gap = 16;

    // console.log("SQUARES ", squares);

    // // Clone squares for seamless looping
    // squares.forEach((square) => {
    //   const clone = square.cloneNode(true);
    //   container.appendChild(clone);
    // });

    // // Set container width to accommodate all squares (originals + clones)
    // // const totalWidth = (squareWidth + gap) * squares.length;
    // // container.style.width = `${totalWidth * 2}px`;

    // let position = 0;
    // let animationId;

    // // Animation function
    // const animate = () => {
    //   position -= 1; // Speed of scrolling (adjust as needed)

    //   // Reset position when first set of squares is out of view
    //   if (position <= -totalWidth) {
    //     position = 0;
    //   }

    //   container.style.transform = `translateX(${position}px)`;
    //   animationId = requestAnimationFrame(animate);
    // };

    // // Start animation
    // animationId = requestAnimationFrame(animate);

    // // Optional: Cleanup on page unload
    // window.addEventListener("beforeunload", () => {
    //   if (animationId) {
    //     cancelAnimationFrame(animationId);
    //   }
    // });
  });
</script>
