---
import Image from "astro/components/Image.astro";

import stream1 from "../../../assets/hero/stream1.svg";
import stream2 from "../../../assets/hero/stream2.svg";
import stream3 from "../../../assets/hero/stream3.svg";

import "./heroStreams.scss";
---

<div id="heroStreams" class="flex-1 w-full flex-col h-full relative hidden lg:flex">
    <Image id="streamLayer1" src={stream1} alt="Hero" class="heroStreamLayer--1" />
    <Image id="streamLayer2" src={stream2} alt="Hero" class="heroStreamLayer--2" />
    <Image id="streamLayer3" src={stream3} alt="Hero" class="heroStreamLayer--3" />
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const streamLayers = document.querySelectorAll('#heroStreams > img');

    let animationsCompleted = 0;

    // Define constants for a fixed point of reference relative to the container
    const containerRect = document.querySelectorAll('#heroStreams')[0].getBoundingClientRect();
    console.log("CONTAINER RECT ", containerRect)
    const fixedMidX = window.innerWidth / 2 + containerRect.width / 2;
    const fixedMidY = containerRect.top + containerRect.height / 2;

    function startFollowingMouse() {
      function moveLayers(e: MouseEvent) {
        const x = e.clientX;
        const y = e.clientY;
        
        requestAnimationFrame(function() {
          if(window.scrollY + y > window.innerHeight) return
          const bottomLayer = streamLayers[0];
          const rect = bottomLayer.getBoundingClientRect();
          const midX = rect.left + rect.width / 2;
          const midY = rect.top + rect.height / 2;
          const proximityThreshold = 150; // Distance from bottom layer to start snapping
          const topBound = fixedMidY - containerRect.height / 3 - proximityThreshold / 3;
          const bottomBound = fixedMidY + containerRect.height / 3 + proximityThreshold / 3;
          const leftBound = fixedMidX - containerRect.width / 2 - proximityThreshold / 2;
          const rightBound = fixedMidX + containerRect.width / 2;
           
          console.log('TEST ', rect)
          const shouldSnap = (y >= topBound && y <= bottomBound) && (x >= leftBound && x <= rightBound);

          streamLayers.forEach((layer, index) => {
            const factor = 0.3;
            const htmlLayer = layer as HTMLElement;
            
            let dx, dy;
            if(shouldSnap) {
              dx = 0;
              dy = 0; 
              htmlLayer.style.opacity = '1';
              htmlLayer.style.top = '50%';
              htmlLayer.style.left = '0';
              htmlLayer.style.right = '4rem'
            } else {
              dx = (x - midX) * factor * (index + 1) / 3;
              dy = (y - midY) * factor * (index + 1) / 3;
              htmlLayer.style.opacity = '1';
              htmlLayer.style.top = '50%';
              htmlLayer.style.left = '0';
              htmlLayer.style.right = '5rem'
              htmlLayer.style.animation = 'none'
            }

            htmlLayer.style.transition = 'top 1s ease, bottom 1s ease, left 1s ease, right 1s ease';
            htmlLayer.style.transform = `translate(calc(-5rem + ${dx}px), calc(-50% + ${dy}px))`;
          });
        });
      }
      
      document.addEventListener('mousemove', moveLayers);
    }
    

    streamLayers.forEach(layer => {
      layer.addEventListener('animationend', () => {
        animationsCompleted++;
        if (animationsCompleted === streamLayers.length) {
          startFollowingMouse();
        }
      });
    });
  });
</script>